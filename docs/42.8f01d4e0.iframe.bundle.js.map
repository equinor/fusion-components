{"version":3,"file":"42.8f01d4e0.iframe.bundle.js","mappings":";;AAsLA;AACA;ACtGA;AAQA;AAsBA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;AASA;AAGA;;;;;;;;ACzGA;;AA3BA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;AAwBA;ACqBA;;;AAGA;AAGA;;AC/DA;;ACDA;;;ACEA;;;;;;;AAOA;;;AAGA;;;AAGA;;;;;;;;;;;;;;;;AAgBA;AACA;;;AAGA;AACA;;;;;;;;;;AAUA;AACA;;;AAGA;AACA;;;AAGA;AACA;;;AAGA;AACA;;;AAGA;AACA;;;AAGA;AACA;;ACpDA;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACRA;ACEA;AACA;;AAWA;;;;;;;;;;;ACfA","sources":["webpack://@equinor/fusion-components/./node_modules/@material/mwc-ripple/mwc-ripple-base.js","webpack://@equinor/fusion-components/./node_modules/@material/mwc-checkbox/mwc-checkbox-base.js","webpack://@equinor/fusion-components/./node_modules/@equinor/fusion-wc-checkbox/lib/element.css.js","webpack://@equinor/fusion-components/./node_modules/@material/mwc-formfield/mwc-formfield-base.js","webpack://@equinor/fusion-components/./node_modules/@equinor/fusion-wc-formfield/lib/element.css.js","webpack://@equinor/fusion-components/./node_modules/@equinor/fusion-wc-formfield/lib/element.js","webpack://@equinor/fusion-components/./node_modules/@equinor/fusion-wc-divider/lib/element.css.js","webpack://@equinor/fusion-components/./node_modules/@equinor/fusion-wc-divider/lib/element.js","webpack://@equinor/fusion-components/./node_modules/@equinor/fusion-wc-theme/lib/element.css.js","webpack://@equinor/fusion-components/./node_modules/@equinor/fusion-wc-theme/lib/element.js","webpack://@equinor/fusion-components/./node_modules/@equinor/fusion-wc-icon/lib/utils/create-icon.js","webpack://@equinor/fusion-components/./node_modules/@equinor/fusion-wc-icon/lib/element.js"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { __decorate } from \"tslib\";\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\nimport { matches } from '@material/dom/ponyfill.js';\nimport { BaseElement } from '@material/mwc-base/base-element.js';\nimport MDCRippleFoundation from '@material/ripple/foundation.js';\nimport { html } from 'lit';\nimport { property, query, state } from 'lit/decorators.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport { styleMap } from 'lit/directives/style-map.js';\n/** @soyCompatible */\nexport class RippleBase extends BaseElement {\n    constructor() {\n        super(...arguments);\n        this.primary = false;\n        this.accent = false;\n        this.unbounded = false;\n        this.disabled = false;\n        this.activated = false;\n        this.selected = false;\n        this.internalUseStateLayerCustomProperties = false;\n        this.hovering = false;\n        this.bgFocused = false;\n        this.fgActivation = false;\n        this.fgDeactivation = false;\n        this.fgScale = '';\n        this.fgSize = '';\n        this.translateStart = '';\n        this.translateEnd = '';\n        this.leftPos = '';\n        this.topPos = '';\n        this.mdcFoundationClass = MDCRippleFoundation;\n    }\n    get isActive() {\n        return matches(this.parentElement || this, ':active');\n    }\n    createAdapter() {\n        return {\n            browserSupportsCssVars: () => true,\n            isUnbounded: () => this.unbounded,\n            isSurfaceActive: () => this.isActive,\n            isSurfaceDisabled: () => this.disabled,\n            addClass: (className) => {\n                switch (className) {\n                    case 'mdc-ripple-upgraded--background-focused':\n                        this.bgFocused = true;\n                        break;\n                    case 'mdc-ripple-upgraded--foreground-activation':\n                        this.fgActivation = true;\n                        break;\n                    case 'mdc-ripple-upgraded--foreground-deactivation':\n                        this.fgDeactivation = true;\n                        break;\n                    default:\n                        break;\n                }\n            },\n            removeClass: (className) => {\n                switch (className) {\n                    case 'mdc-ripple-upgraded--background-focused':\n                        this.bgFocused = false;\n                        break;\n                    case 'mdc-ripple-upgraded--foreground-activation':\n                        this.fgActivation = false;\n                        break;\n                    case 'mdc-ripple-upgraded--foreground-deactivation':\n                        this.fgDeactivation = false;\n                        break;\n                    default:\n                        break;\n                }\n            },\n            containsEventTarget: () => true,\n            registerInteractionHandler: () => undefined,\n            deregisterInteractionHandler: () => undefined,\n            registerDocumentInteractionHandler: () => undefined,\n            deregisterDocumentInteractionHandler: () => undefined,\n            registerResizeHandler: () => undefined,\n            deregisterResizeHandler: () => undefined,\n            updateCssVariable: (varName, value) => {\n                switch (varName) {\n                    case '--mdc-ripple-fg-scale':\n                        this.fgScale = value;\n                        break;\n                    case '--mdc-ripple-fg-size':\n                        this.fgSize = value;\n                        break;\n                    case '--mdc-ripple-fg-translate-end':\n                        this.translateEnd = value;\n                        break;\n                    case '--mdc-ripple-fg-translate-start':\n                        this.translateStart = value;\n                        break;\n                    case '--mdc-ripple-left':\n                        this.leftPos = value;\n                        break;\n                    case '--mdc-ripple-top':\n                        this.topPos = value;\n                        break;\n                    default:\n                        break;\n                }\n            },\n            computeBoundingRect: () => (this.parentElement || this).getBoundingClientRect(),\n            getWindowPageOffset: () => ({ x: window.pageXOffset, y: window.pageYOffset }),\n        };\n    }\n    startPress(ev) {\n        this.waitForFoundation(() => {\n            this.mdcFoundation.activate(ev);\n        });\n    }\n    endPress() {\n        this.waitForFoundation(() => {\n            this.mdcFoundation.deactivate();\n        });\n    }\n    startFocus() {\n        this.waitForFoundation(() => {\n            this.mdcFoundation.handleFocus();\n        });\n    }\n    endFocus() {\n        this.waitForFoundation(() => {\n            this.mdcFoundation.handleBlur();\n        });\n    }\n    startHover() {\n        this.hovering = true;\n    }\n    endHover() {\n        this.hovering = false;\n    }\n    /**\n     * Wait for the MDCFoundation to be created by `firstUpdated`\n     */\n    waitForFoundation(fn) {\n        if (this.mdcFoundation) {\n            fn();\n        }\n        else {\n            this.updateComplete.then(fn);\n        }\n    }\n    update(changedProperties) {\n        if (changedProperties.has('disabled')) {\n            // stop hovering when ripple is disabled to prevent a stuck \"hover\" state\n            // When re-enabled, the outer component will get a `mouseenter` event on\n            // the first movement, which will call `startHover()`\n            if (this.disabled) {\n                this.endHover();\n            }\n        }\n        super.update(changedProperties);\n    }\n    /** @soyTemplate */\n    render() {\n        const shouldActivateInPrimary = this.activated && (this.primary || !this.accent);\n        const shouldSelectInPrimary = this.selected && (this.primary || !this.accent);\n        /** @classMap */\n        const classes = {\n            'mdc-ripple-surface--accent': this.accent,\n            'mdc-ripple-surface--primary--activated': shouldActivateInPrimary,\n            'mdc-ripple-surface--accent--activated': this.accent && this.activated,\n            'mdc-ripple-surface--primary--selected': shouldSelectInPrimary,\n            'mdc-ripple-surface--accent--selected': this.accent && this.selected,\n            'mdc-ripple-surface--disabled': this.disabled,\n            'mdc-ripple-surface--hover': this.hovering,\n            'mdc-ripple-surface--primary': this.primary,\n            'mdc-ripple-surface--selected': this.selected,\n            'mdc-ripple-upgraded--background-focused': this.bgFocused,\n            'mdc-ripple-upgraded--foreground-activation': this.fgActivation,\n            'mdc-ripple-upgraded--foreground-deactivation': this.fgDeactivation,\n            'mdc-ripple-upgraded--unbounded': this.unbounded,\n            'mdc-ripple-surface--internal-use-state-layer-custom-properties': this.internalUseStateLayerCustomProperties,\n        };\n        return html `\n        <div class=\"mdc-ripple-surface mdc-ripple-upgraded ${classMap(classes)}\"\n          style=\"${styleMap({\n            '--mdc-ripple-fg-scale': this.fgScale,\n            '--mdc-ripple-fg-size': this.fgSize,\n            '--mdc-ripple-fg-translate-end': this.translateEnd,\n            '--mdc-ripple-fg-translate-start': this.translateStart,\n            '--mdc-ripple-left': this.leftPos,\n            '--mdc-ripple-top': this.topPos,\n        })}\"></div>`;\n    }\n}\n__decorate([\n    query('.mdc-ripple-surface')\n], RippleBase.prototype, \"mdcRoot\", void 0);\n__decorate([\n    property({ type: Boolean })\n], RippleBase.prototype, \"primary\", void 0);\n__decorate([\n    property({ type: Boolean })\n], RippleBase.prototype, \"accent\", void 0);\n__decorate([\n    property({ type: Boolean })\n], RippleBase.prototype, \"unbounded\", void 0);\n__decorate([\n    property({ type: Boolean })\n], RippleBase.prototype, \"disabled\", void 0);\n__decorate([\n    property({ type: Boolean })\n], RippleBase.prototype, \"activated\", void 0);\n__decorate([\n    property({ type: Boolean })\n], RippleBase.prototype, \"selected\", void 0);\n__decorate([\n    property({ type: Boolean })\n], RippleBase.prototype, \"internalUseStateLayerCustomProperties\", void 0);\n__decorate([\n    state()\n], RippleBase.prototype, \"hovering\", void 0);\n__decorate([\n    state()\n], RippleBase.prototype, \"bgFocused\", void 0);\n__decorate([\n    state()\n], RippleBase.prototype, \"fgActivation\", void 0);\n__decorate([\n    state()\n], RippleBase.prototype, \"fgDeactivation\", void 0);\n__decorate([\n    state()\n], RippleBase.prototype, \"fgScale\", void 0);\n__decorate([\n    state()\n], RippleBase.prototype, \"fgSize\", void 0);\n__decorate([\n    state()\n], RippleBase.prototype, \"translateStart\", void 0);\n__decorate([\n    state()\n], RippleBase.prototype, \"translateEnd\", void 0);\n__decorate([\n    state()\n], RippleBase.prototype, \"leftPos\", void 0);\n__decorate([\n    state()\n], RippleBase.prototype, \"topPos\", void 0);\n//# sourceMappingURL=mwc-ripple-base.js.map","/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { __decorate } from \"tslib\";\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\nimport '@material/mwc-ripple/mwc-ripple.js';\nimport { ariaProperty } from '@material/mwc-base/aria-property.js';\nimport { FormElement } from '@material/mwc-base/form-element.js';\nimport { RippleHandlers } from '@material/mwc-ripple/ripple-handlers.js';\nimport { html } from 'lit';\nimport { eventOptions, property, query, queryAsync, state } from 'lit/decorators.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\n/** @soyCompatible */\nexport class CheckboxBase extends FormElement {\n    constructor() {\n        super(...arguments);\n        this.checked = false;\n        this.indeterminate = false;\n        this.disabled = false;\n        this.name = '';\n        this.value = 'on';\n        /**\n         * Touch target extends beyond visual boundary of a component by default.\n         * Set to `true` to remove touch target added to the component.\n         * @see https://material.io/design/usability/accessibility.html\n         */\n        this.reducedTouchTarget = false;\n        this.animationClass = '';\n        this.shouldRenderRipple = false;\n        this.focused = false;\n        // MDC Foundation is unused\n        this.mdcFoundationClass = undefined;\n        this.mdcFoundation = undefined;\n        this.rippleElement = null;\n        this.rippleHandlers = new RippleHandlers(() => {\n            this.shouldRenderRipple = true;\n            this.ripple.then((v) => this.rippleElement = v);\n            return this.ripple;\n        });\n    }\n    createAdapter() {\n        return {};\n    }\n    update(changedProperties) {\n        const oldIndeterminate = changedProperties.get('indeterminate');\n        const oldChecked = changedProperties.get('checked');\n        const oldDisabled = changedProperties.get('disabled');\n        if (oldIndeterminate !== undefined || oldChecked !== undefined ||\n            oldDisabled !== undefined) {\n            const oldState = this.calculateAnimationStateName(!!oldChecked, !!oldIndeterminate, !!oldDisabled);\n            const newState = this.calculateAnimationStateName(this.checked, this.indeterminate, this.disabled);\n            this.animationClass = `${oldState}-${newState}`;\n        }\n        super.update(changedProperties);\n    }\n    calculateAnimationStateName(checked, indeterminate, disabled) {\n        if (disabled) {\n            return 'disabled';\n        }\n        else if (indeterminate) {\n            return 'indeterminate';\n        }\n        else if (checked) {\n            return 'checked';\n        }\n        else {\n            return 'unchecked';\n        }\n    }\n    // TODO(dfreedm): Make this use selected as a param after Polymer/internal#739\n    /** @soyTemplate */\n    renderRipple() {\n        return this.shouldRenderRipple ? this.renderRippleTemplate() : '';\n    }\n    /** @soyTemplate */\n    renderRippleTemplate() {\n        return html `<mwc-ripple\n        .disabled=\"${this.disabled}\"\n        unbounded></mwc-ripple>`;\n    }\n    /**\n     * @soyTemplate\n     * @soyAttributes checkboxAttributes: input\n     * @soyClasses checkboxClasses: .mdc-checkbox\n     */\n    render() {\n        const selected = this.indeterminate || this.checked;\n        /* eslint-disable eqeqeq */\n        // tslint:disable:triple-equals\n        /** @classMap */\n        const classes = {\n            'mdc-checkbox--disabled': this.disabled,\n            'mdc-checkbox--selected': selected,\n            'mdc-checkbox--touch': !this.reducedTouchTarget,\n            'mdc-ripple-upgraded--background-focused': this.focused,\n            // transition animiation classes\n            'mdc-checkbox--anim-checked-indeterminate': this.animationClass == 'checked-indeterminate',\n            'mdc-checkbox--anim-checked-unchecked': this.animationClass == 'checked-unchecked',\n            'mdc-checkbox--anim-indeterminate-checked': this.animationClass == 'indeterminate-checked',\n            'mdc-checkbox--anim-indeterminate-unchecked': this.animationClass == 'indeterminate-unchecked',\n            'mdc-checkbox--anim-unchecked-checked': this.animationClass == 'unchecked-checked',\n            'mdc-checkbox--anim-unchecked-indeterminate': this.animationClass == 'unchecked-indeterminate',\n        };\n        // tslint:enable:triple-equals\n        /* eslint-enable eqeqeq */\n        const ariaChecked = this.indeterminate ? 'mixed' : undefined;\n        return html `\n      <div class=\"mdc-checkbox mdc-checkbox--upgraded ${classMap(classes)}\">\n        <input type=\"checkbox\"\n              class=\"mdc-checkbox__native-control\"\n              name=\"${ifDefined(this.name)}\"\n              aria-checked=\"${ifDefined(ariaChecked)}\"\n              aria-label=\"${ifDefined(this.ariaLabel)}\"\n              aria-labelledby=\"${ifDefined(this.ariaLabelledBy)}\"\n              aria-describedby=\"${ifDefined(this.ariaDescribedBy)}\"\n              data-indeterminate=\"${this.indeterminate ? 'true' : 'false'}\"\n              ?disabled=\"${this.disabled}\"\n              .indeterminate=\"${this.indeterminate}\"\n              .checked=\"${this.checked}\"\n              .value=\"${this.value}\"\n              @change=\"${this.handleChange}\"\n              @focus=\"${this.handleFocus}\"\n              @blur=\"${this.handleBlur}\"\n              @mousedown=\"${this.handleRippleMouseDown}\"\n              @mouseenter=\"${this.handleRippleMouseEnter}\"\n              @mouseleave=\"${this.handleRippleMouseLeave}\"\n              @touchstart=\"${this.handleRippleTouchStart}\"\n              @touchend=\"${this.handleRippleDeactivate}\"\n              @touchcancel=\"${this.handleRippleDeactivate}\">\n        <div class=\"mdc-checkbox__background\"\n          @animationend=\"${this.resetAnimationClass}\">\n          <svg class=\"mdc-checkbox__checkmark\"\n              viewBox=\"0 0 24 24\">\n            <path class=\"mdc-checkbox__checkmark-path\"\n                  fill=\"none\"\n                  d=\"M1.73,12.91 8.1,19.28 22.79,4.59\"></path>\n          </svg>\n          <div class=\"mdc-checkbox__mixedmark\"></div>\n        </div>\n        ${this.renderRipple()}\n      </div>`;\n    }\n    setFormData(formData) {\n        if (this.name && this.checked) {\n            formData.append(this.name, this.value);\n        }\n    }\n    handleFocus() {\n        this.focused = true;\n        this.handleRippleFocus();\n    }\n    handleBlur() {\n        this.focused = false;\n        this.handleRippleBlur();\n    }\n    handleRippleMouseDown(event) {\n        const onUp = () => {\n            window.removeEventListener('mouseup', onUp);\n            this.handleRippleDeactivate();\n        };\n        window.addEventListener('mouseup', onUp);\n        this.rippleHandlers.startPress(event);\n    }\n    handleRippleTouchStart(event) {\n        this.rippleHandlers.startPress(event);\n    }\n    handleRippleDeactivate() {\n        this.rippleHandlers.endPress();\n    }\n    handleRippleMouseEnter() {\n        this.rippleHandlers.startHover();\n    }\n    handleRippleMouseLeave() {\n        this.rippleHandlers.endHover();\n    }\n    handleRippleFocus() {\n        this.rippleHandlers.startFocus();\n    }\n    handleRippleBlur() {\n        this.rippleHandlers.endFocus();\n    }\n    handleChange() {\n        this.checked = this.formElement.checked;\n        this.indeterminate = this.formElement.indeterminate;\n    }\n    resetAnimationClass() {\n        this.animationClass = '';\n    }\n    get isRippleActive() {\n        var _a;\n        return ((_a = this.rippleElement) === null || _a === void 0 ? void 0 : _a.isActive) || false;\n    }\n}\n__decorate([\n    query('.mdc-checkbox')\n], CheckboxBase.prototype, \"mdcRoot\", void 0);\n__decorate([\n    query('input')\n], CheckboxBase.prototype, \"formElement\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], CheckboxBase.prototype, \"checked\", void 0);\n__decorate([\n    property({ type: Boolean })\n], CheckboxBase.prototype, \"indeterminate\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], CheckboxBase.prototype, \"disabled\", void 0);\n__decorate([\n    property({ type: String, reflect: true })\n], CheckboxBase.prototype, \"name\", void 0);\n__decorate([\n    property({ type: String })\n], CheckboxBase.prototype, \"value\", void 0);\n__decorate([\n    ariaProperty,\n    property({ type: String, attribute: 'aria-label' })\n], CheckboxBase.prototype, \"ariaLabel\", void 0);\n__decorate([\n    ariaProperty,\n    property({ type: String, attribute: 'aria-labelledby' })\n], CheckboxBase.prototype, \"ariaLabelledBy\", void 0);\n__decorate([\n    ariaProperty,\n    property({ type: String, attribute: 'aria-describedby' })\n], CheckboxBase.prototype, \"ariaDescribedBy\", void 0);\n__decorate([\n    property({ type: Boolean })\n], CheckboxBase.prototype, \"reducedTouchTarget\", void 0);\n__decorate([\n    state()\n], CheckboxBase.prototype, \"animationClass\", void 0);\n__decorate([\n    state()\n], CheckboxBase.prototype, \"shouldRenderRipple\", void 0);\n__decorate([\n    state()\n], CheckboxBase.prototype, \"focused\", void 0);\n__decorate([\n    queryAsync('mwc-ripple')\n], CheckboxBase.prototype, \"ripple\", void 0);\n__decorate([\n    eventOptions({ passive: true })\n], CheckboxBase.prototype, \"handleRippleTouchStart\", null);\n//# sourceMappingURL=mwc-checkbox-base.js.map","import { css, unsafeCSS } from 'lit';\nimport { styles as theme } from '@equinor/fusion-web-theme';\nimport { styles as mdcStyle } from '@material/mwc-checkbox/mwc-checkbox.css';\nexport const style = css `\n  :host {\n    --fwc-checkbox-size: 18px;\n    --fwc-checkbox-spacing: calc(var(--fwc-checkbox-size) / 2);\n  }\n  :host([reducedtouchtarget]) {\n    --fwc-checkbox-size: 14px;\n  }\n`;\nexport const mdcStyleOverride = css `\n  :host {\n    --mdc-checkbox-ink-color: ${unsafeCSS(theme.colors.text.static_icons__primary_white.getVariable('color'))};\n    --mdc-checkbox-unchecked-color: ${unsafeCSS(theme.colors.interactive.primary__resting.getVariable('color'))};\n    --mdc-checkbox-disabled-color: ${unsafeCSS(theme.colors.interactive.disabled__fill.getVariable('color'))};\n  }\n  .mdc-checkbox {\n    flex: 0 0 var(--fwc-checkbox-size) !important;\n    width: var(--fwc-checkbox-size) !important;\n    height: var(--fwc-checkbox-size) !important;\n    padding: var(--fwc-checkbox-spacing) !important;\n    margin: 0 !important;\n  }\n  .mdc-checkbox__background {\n    width: var(--fwc-checkbox-size) !important;\n    height: var(--fwc-checkbox-size) !important;\n  }\n  .mdc-checkbox .mdc-checkbox__background {\n    top: var(--fwc-checkbox-spacing) !important;\n    left: var(--fwc-checkbox-spacing) !important;\n  }\n  .mdc-checkbox .mdc-checkbox__native-control {\n    width: calc(var(--fwc-checkbox-size) + var(--fwc-checkbox-spacing) * 2) !important;\n    height: calc(var(--fwc-checkbox-size) + var(--fwc-checkbox-spacing) * 2) !important;\n    top: 0 !important;\n    left: 0 !important;\n  }\n`;\nexport const styles = [mdcStyle, mdcStyleOverride, style];\nexport default styles;\n//# sourceMappingURL=element.css.js.map","/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { __decorate } from \"tslib\";\nimport MDCFormFieldFoundation from '@material/form-field/foundation.js';\nimport { BaseElement } from '@material/mwc-base/base-element.js';\nimport { FormElement } from '@material/mwc-base/form-element.js';\nimport { observer } from '@material/mwc-base/observer.js';\nimport { html } from 'lit';\nimport { property, query, queryAssignedNodes } from 'lit/decorators.js';\nimport { classMap } from 'lit/directives/class-map.js';\nexport class FormfieldBase extends BaseElement {\n    constructor() {\n        super(...arguments);\n        this.alignEnd = false;\n        this.spaceBetween = false;\n        this.nowrap = false;\n        this.label = '';\n        this.mdcFoundationClass = MDCFormFieldFoundation;\n    }\n    createAdapter() {\n        return {\n            registerInteractionHandler: (type, handler) => {\n                this.labelEl.addEventListener(type, handler);\n            },\n            deregisterInteractionHandler: (type, handler) => {\n                this.labelEl.removeEventListener(type, handler);\n            },\n            activateInputRipple: async () => {\n                const input = this.input;\n                if (input instanceof FormElement) {\n                    const ripple = await input.ripple;\n                    if (ripple) {\n                        ripple.startPress();\n                    }\n                }\n            },\n            deactivateInputRipple: async () => {\n                const input = this.input;\n                if (input instanceof FormElement) {\n                    const ripple = await input.ripple;\n                    if (ripple) {\n                        ripple.endPress();\n                    }\n                }\n            },\n        };\n    }\n    get input() {\n        var _a, _b;\n        return (_b = (_a = this.slottedInputs) === null || _a === void 0 ? void 0 : _a[0]) !== null && _b !== void 0 ? _b : null;\n    }\n    render() {\n        const classes = {\n            'mdc-form-field--align-end': this.alignEnd,\n            'mdc-form-field--space-between': this.spaceBetween,\n            'mdc-form-field--nowrap': this.nowrap\n        };\n        return html `\n      <div class=\"mdc-form-field ${classMap(classes)}\">\n        <slot></slot>\n        <label class=\"mdc-label\"\n               @click=\"${this._labelClick}\">${this.label}</label>\n      </div>`;\n    }\n    click() {\n        this._labelClick();\n    }\n    _labelClick() {\n        const input = this.input;\n        if (input) {\n            input.focus();\n            input.click();\n        }\n    }\n}\n__decorate([\n    property({ type: Boolean })\n], FormfieldBase.prototype, \"alignEnd\", void 0);\n__decorate([\n    property({ type: Boolean })\n], FormfieldBase.prototype, \"spaceBetween\", void 0);\n__decorate([\n    property({ type: Boolean })\n], FormfieldBase.prototype, \"nowrap\", void 0);\n__decorate([\n    property({ type: String }),\n    observer(async function (label) {\n        var _a;\n        (_a = this.input) === null || _a === void 0 ? void 0 : _a.setAttribute('aria-label', label);\n    })\n], FormfieldBase.prototype, \"label\", void 0);\n__decorate([\n    query('.mdc-form-field')\n], FormfieldBase.prototype, \"mdcRoot\", void 0);\n__decorate([\n    queryAssignedNodes('', true, '*')\n], FormfieldBase.prototype, \"slottedInputs\", void 0);\n__decorate([\n    query('label')\n], FormfieldBase.prototype, \"labelEl\", void 0);\n//# sourceMappingURL=mwc-formfield-base.js.map","import { css, unsafeCSS } from 'lit';\nimport { styles as theme } from '@equinor/fusion-web-theme';\nexport const style = css `\n  .mdc-label {\n    ${unsafeCSS(theme.typography.input.label)};\n  }\n`;\nexport default style;\n//# sourceMappingURL=element.css.js.map","import { FormfieldBase } from '@material/mwc-formfield/mwc-formfield-base';\nimport { styles as mdcStyle } from '@material/mwc-formfield/mwc-formfield.css';\nimport style from './element.css';\nexport class FormfieldElement extends FormfieldBase {\n}\nFormfieldElement.styles = [mdcStyle, style];\nexport default FormfieldElement;\n//# sourceMappingURL=element.js.map","import { css, unsafeCSS } from 'lit';\nimport { styles as theme } from '@equinor/fusion-web-theme';\nexport const style = css `\n  :host {\n    display: flex;\n    --fwc-divider-color: ${unsafeCSS(theme.colors.ui.background__medium.getVariable('color'))};\n  }\n  :host .divider {\n    border: none;\n    background-color: var(--fwc-divider-color);\n  }\n  :host([color='medium']) .divider {\n    --fwc-divider-color: ${unsafeCSS(theme.colors.ui.background__medium.getVariable('color'))};\n  }\n  :host([color='light']) .divider {\n    --fwc-divider-color: ${unsafeCSS(theme.colors.ui.background__light.getVariable('color'))};\n  }\n  :host([color='lighter']) .divider {\n    --fwc-divider-color: ${unsafeCSS(theme.colors.ui.background__default.getVariable('color'))};\n  }\n  :host([orientation='horizontal']) .divider {\n    width: 100%;\n    height: 1px;\n  }\n  :host([orientation='vertical']) .divider {\n    width: 1px;\n    height: auto;\n    align-self: stretch;\n  }\n  :host([variant='full'][orientation='vertical']) .divider {\n    margin-top: 0;\n    margin-bottom: 0;\n  }\n  :host([variant='middle'][orientation='horizontal']) .divider {\n    margin-left: ${unsafeCSS(theme.spacing.comfortable.medium.getVariable('padding'))};\n    margin-right: ${unsafeCSS(theme.spacing.comfortable.medium.getVariable('padding'))};\n  }\n  :host([variant='middle'][orientation='vertical']) .divider {\n    margin-top: ${unsafeCSS(theme.spacing.comfortable.small.getVariable('padding'))};\n    margin-bottom: ${unsafeCSS(theme.spacing.comfortable.small.getVariable('padding'))};\n  }\n  :host([variant='list'][orientation='horizontal']) .divider {\n    margin: 0;\n    padding: 0;\n    flex-shrink: 0;\n    height: 1px;\n    list-style: none;\n  }\n  :host([spacing='small'][orientation='horizontal']:not([variant='list'])) .divider {\n    margin-top: ${unsafeCSS(theme.spacing.comfortable.small.getVariable('padding'))};\n    margin-bottom: ${unsafeCSS(theme.spacing.comfortable.small.getVariable('padding'))};\n  }\n  :host([spacing='medium'][orientation='horizontal']:not([variant='list'])) .divider {\n    margin-top: ${unsafeCSS(theme.spacing.comfortable.medium.getVariable('padding'))};\n    margin-bottom: ${unsafeCSS(theme.spacing.comfortable.medium.getVariable('padding'))};\n  }\n  :host([spacing='large'][orientation='horizontal']:not([variant='list'])) .divider {\n    margin-top: ${unsafeCSS(theme.spacing.comfortable.large.getVariable('padding'))};\n    margin-bottom: ${unsafeCSS(theme.spacing.comfortable.large.getVariable('padding'))};\n  }\n  :host([spacing='small'][orientation='vertical']) .divider {\n    margin-left: ${unsafeCSS(theme.spacing.comfortable.small.getVariable('padding'))};\n    margin-right: ${unsafeCSS(theme.spacing.comfortable.small.getVariable('padding'))};\n  }\n  :host([spacing='medium'][orientation='vertical']) .divider {\n    margin-left: ${unsafeCSS(theme.spacing.comfortable.medium.getVariable('padding'))};\n    margin-right: ${unsafeCSS(theme.spacing.comfortable.medium.getVariable('padding'))};\n  }\n  :host([spacing='large'][orientation='vertical']) .divider {\n    margin-left: ${unsafeCSS(theme.spacing.comfortable.large.getVariable('padding'))};\n    margin-right: ${unsafeCSS(theme.spacing.comfortable.large.getVariable('padding'))};\n  }\n`;\nexport default style;\n//# sourceMappingURL=element.css.js.map","import { __decorate } from \"tslib\";\nimport { LitElement, html } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { DividerColor, DividerSpacing, DividerVariant, DividerOrientation } from './types';\nimport style from './element.css';\n/**\n * Element for rendering a divider\n * {@inheritdoc}\n *\n * @tag fwc-divider\n *\n * @property {DividerColor} color - Sets the color of the divider.\n * @property {DividerSpacing} spacing - Sets the spacing type for the divider.\n * @property {DividerVariant} variant - Sets the divider variant.\n * @property {DividerOrientation} orientation - Sets orientation type for the divider.\n *\n * @cssprop {theme.colors.ui.background__medium} --fwc-divider-color - color of the divider.\n */\nexport class DividerElement extends LitElement {\n    constructor() {\n        super(...arguments);\n        /**\n         * Color of the divider.\n         */\n        this.color = DividerColor.Medium;\n        /**\n         * Spacing of the divider.\n         */\n        this.spacing = DividerSpacing.Medium;\n        /**\n         * Variant of the divider.\n         */\n        this.variant = DividerVariant.Full;\n        /**\n         * Orientation of the divider.\n         */\n        this.orientation = DividerOrientation.Horizontal;\n    }\n    /** {@inheritDoc} */\n    updated(changedProperties) {\n        super.updated(changedProperties);\n        if (changedProperties.has('variant')) {\n            if (this.variant === 'list' && this.orientation === 'vertical') {\n                this.variant = DividerVariant.Full;\n            }\n            this.requestUpdate();\n        }\n    }\n    /** {@inheritDoc} */\n    render() {\n        if (this.variant === 'list' && this.orientation === 'horizontal') {\n            return html `<li class=\"divider\" role=\"separator\"></li>`;\n        }\n        return html `<hr class=\"divider\" />`;\n    }\n}\nDividerElement.styles = [style];\n__decorate([\n    property({ type: String, reflect: true })\n], DividerElement.prototype, \"color\", void 0);\n__decorate([\n    property({ type: String, reflect: true })\n], DividerElement.prototype, \"spacing\", void 0);\n__decorate([\n    property({ type: String, reflect: true })\n], DividerElement.prototype, \"variant\", void 0);\n__decorate([\n    property({ type: String, reflect: true })\n], DividerElement.prototype, \"orientation\", void 0);\nexport default DividerElement;\n//# sourceMappingURL=element.js.map","import { css, unsafeCSS } from 'lit';\nimport { styles as theme } from '@equinor/fusion-web-theme';\nexport const style = css `\n  ::slotted(*) {\n    --fwc-ripple-color: #000;\n    --fwc-ripple-hover-opacity: 0.1;\n    --fwc-theme-background: #fff;\n    --fwc-theme-primary: ${unsafeCSS(theme.colors.interactive.primary__resting.getVariable('color'))};\n    --fwc-theme-error: ${unsafeCSS(theme.colors.interactive.danger__text.getVariable('color'))};\n    --fwc-theme-on-primary: ${unsafeCSS(theme.colors.text.static_icons__primary_white.getVariable('color'))};\n    --fwc-theme-on-secondary: ${unsafeCSS(theme.colors.text.static_icons__primary_white.getVariable('color'))};\n    --fwc-theme-on-surface: ${unsafeCSS(theme.colors.text.static_icons__secondary.getVariable('color'))};\n    --fwc-theme-secondary: ${unsafeCSS(theme.colors.interactive.primary__resting.getVariable('color'))};\n    --fwc-theme-surface: ${unsafeCSS(theme.colors.ui.background__light.getVariable('color'))};\n    --fwc-typography-font-family: ${unsafeCSS(theme.typography.paragraph.body_long.getVariable('fontFamily'))},\n      sans-serif;\n\n    --mdc-ripple-color: var(--fwc-ripple-color);\n    --mdc-ripple-hover-opacity: var(--fwc-ripple-hover-opacity);\n    --mdc-theme-background: var(--fwc-theme-background);\n    --mdc-theme-primary: var(--fwc-theme-primary);\n    --mdc-theme-error: var(--fwc-theme-error);\n    --mdc-theme-on-primary: var(--fwc-theme-on-primary);\n    --mdc-theme-on-secondary: var(--fwc-theme-on-secondary);\n    --mdc-theme-on-surface: var(--fwc-theme-on-surface);\n    --mdc-theme-secondary: var(--fwc-theme-secondary);\n    --mdc-theme-surface: var(--fwc-theme-surface);\n    --mdc-typography-font-family: var(--fwc-typography-font-family);\n    font-family: var(--fwc-typography-font-family);\n  }\n`;\nexport default style;\n//# sourceMappingURL=element.css.js.map","import { html, LitElement } from 'lit';\nimport style from './element.css';\nconst FONT_ID = 'FUSION_EQUINOR_FONT';\n/**\n * REMARKS - might unload font on disconnect\n */\nexport default class ThemeElement extends LitElement {\n    get FontLink() {\n        return document.head.querySelector(`link#${FONT_ID}`);\n    }\n    /** @override */\n    connectedCallback() {\n        super.connectedCallback();\n        !this.FontLink && this.injectFont();\n    }\n    /**\n     * Inject font to head of current document\n     */\n    injectFont() {\n        const link = document.createElement('link');\n        link.id = FONT_ID;\n        link.href = 'https://cdn.eds.equinor.com/font/equinor-font.css';\n        link.rel = 'stylesheet';\n        document.head.append(link);\n    }\n    render() {\n        return html `<slot></slot>`;\n    }\n}\nThemeElement.styles = [style];\n//# sourceMappingURL=element.js.map","import { svg } from 'lit';\nimport * as edsIcons from '@equinor/eds-icons';\nexport const iconNames = Object.keys(edsIcons);\nexport var IconType;\n(function (IconType) {\n    IconType[\"EDS\"] = \"eds\";\n})(IconType || (IconType = {}));\nexport const createSvg = ({ height, width, svgPathData }) => svg `\n  <svg viewBox=\"0 0 ${width} ${height}\">\n    <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"${svgPathData}\"></path>\n  </svg>\n`;\nexport const createIcon = (name, type = IconType.EDS) => {\n    switch (type) {\n        case IconType.EDS: {\n            const icon = edsIcons[name];\n            if (!icon) {\n                console.warn('could not find icon', name);\n                return null;\n            }\n            return createSvg(edsIcons[name]);\n        }\n    }\n};\nexport default createIcon;\n//# sourceMappingURL=create-icon.js.map","import { __decorate } from \"tslib\";\nimport { LitElement } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport createIcon from './utils/create-icon';\nimport { style } from './element.css';\nexport class IconElement extends LitElement {\n    render() {\n        return this.icon ? createIcon(this.icon) : null;\n    }\n}\nIconElement.styles = [style];\n__decorate([\n    property()\n], IconElement.prototype, \"icon\", void 0);\n__decorate([\n    property()\n], IconElement.prototype, \"type\", void 0);\n//# sourceMappingURL=element.js.map"],"names":[],"sourceRoot":""}